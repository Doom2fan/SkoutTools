//------------------------------------------------
//      File: BIT.bt
//    Author: Chronos Ouroboros
//   Version: 1.0
//   Purpose: Parse BIT archive files.
//  Category: Game
// File Mask: *.bit
//  ID Bytes: 42 49 54 50 // BITP
//------------------------------------------------

LittleEndian();

typedef enum <byte> {
    Compression_Copy  = 0,
    Compression_RLE   = 1,
    Compression_LZRLE = 2,
} BIT_CompressionMode;

typedef enum <ubyte> {
    BITF_None = 0,
    BITF_SimpleHeader = 1,
} BIT_Flags;

struct BIT_File {
    struct BIT_Header {
        char IdMagic [4];
        if (IdMagic != "BITP") {
            Warning ("Not a BIT file.");
            Exit (-1);
        }

        ubyte Revision;
        BIT_Flags Flags;
        if ((Flags & BITF_SimpleHeader) == 0) {
            Warning ("Only \"simple\" BIT files supported.");
            Exit (0);
        }
        uint EntryCount;
    } header;

    local int directoryStart = FTell ();
    struct BIT_Entry {
        uint Id <format=hex>;
        uint Offset;
        uint Length;
        uint Hash <format=hex>;
        ubyte FileIdentA <format=hex>;
    } entries [header.EntryCount] <read=ReadBITEntry>;
    local int directoryEnd = FTell ();

    FSeek (directoryStart);
    struct BIT_EntriesData {
        local int i;
        for (i = 0; i < header.EntryCount; i++) {
            FSeek (entries [i].Offset);
            struct BIT_EntryData {
                BIT_CompressionMode CompressionMode;
                typedef ubyte FileIdentType [3] <format=hex, read=Str ("%.2X:%.2X:%.2X", this [0], this [1], this [2])>;
                FileIdentType FileIdent;
                uint Length;
                ushort UncompressedBytes;
            } entryData;
        }
        FSeek (directoryEnd);
    } entriesData;
} file <open=true>;

string ReadBITEntry (BIT_Entry &entry) {
    return Str ("%.8X.%.8X", entry.Id, entry.Hash);
}

return 0;